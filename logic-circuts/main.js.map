{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/gate-selector/gate-selector.component.html","webpack:///./src/app/gate-selector/gate-selector.component.scss","webpack:///./src/app/gate-selector/gate-selector.component.ts","webpack:///./src/app/gate.ts","webpack:///./src/app/gate/gate.component.html","webpack:///./src/app/gate/gate.component.scss","webpack:///./src/app/gate/gate.component.ts","webpack:///./src/app/truth-table/truth-table.component.html","webpack:///./src/app/truth-table/truth-table.component.scss","webpack:///./src/app/truth-table/truth-table.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<mat-toolbar color=\\\"primary\\\">Logic Circuts</mat-toolbar>\\n<app-gate-selector></app-gate-selector>\\n\"","module.exports = \"\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { GateSelectorComponent } from './gate-selector/gate-selector.component';\nimport { GateComponent } from './gate/gate.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatChipsModule,\n  MatCardModule,\n  MatDividerModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatRadioModule,\n  MatGridListModule,\n  MatTableModule\n} from '@angular/material';\nimport { TruthTableComponent } from './truth-table/truth-table.component';\n\n@NgModule({\n  declarations: [AppComponent, GateSelectorComponent, GateComponent, TruthTableComponent],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatCheckboxModule,\n    MatRadioModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatDividerModule,\n    MatChipsModule,\n    MatGridListModule,\n    MatTableModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<mat-card class=\\\"gate-selector\\\">\\n  <mat-card-title>Basic Logic Gates</mat-card-title>\\n  <mat-card-header>\\n    <mat-card-title>Select a gate</mat-card-title>\\n    <mat-card-subtitle>from below</mat-card-subtitle>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <mat-radio-group [(ngModel)]=\\\"selectedGate\\\">\\n      <mat-radio-button [value]=\\\"type\\\" *ngFor=\\\"let type of gateList\\\">\\n        {{type}}\\n      </mat-radio-button>\\n    </mat-radio-group>\\n  </mat-card-content>\\n</mat-card>\\n<app-gate [type]=\\\"selectedGate\\\" *ngIf=\\\"selectedGate\\\"></app-gate>\\n<app-truth-table [type]=\\\"selectedGate\\\" *ngIf=\\\"selectedGate\\\"></app-truth-table>\"","module.exports = \"mat-radio-button {\\n  display: block; }\\n\\n.gate-selector {\\n  max-width: 400px; }\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-gate-selector',\n  templateUrl: './gate-selector.component.html',\n  styleUrls: ['./gate-selector.component.scss']\n})\nexport class GateSelectorComponent implements OnInit {\n  selectedGate: string;\n  gateList: Array<string> = ['AND', 'OR', 'NAND', 'NOR', 'XOR', 'XNOR'];\n  constructor() { }\n\n  ngOnInit() {\n  }\n}\n","export class Gate {\n  type: string;\n  constructor(type: string) {\n    this.type = type;\n  }\n  evaluate(a: boolean, b: boolean, c: boolean, isClocked: boolean): boolean {\n    let result: boolean;\n    // clock value is set, AND isClocked\n    // clock value isn't set AND isn't isClocked\n    if ((c && isClocked) || (!c && !isClocked)) {\n      switch (this.type) {\n        case 'AND':\n          result = a && b;\n          break;\n        case 'OR':\n          result = a || b;\n          break;\n        case 'NAND':\n          result = !(a && b);\n          break;\n        case 'NOR':\n          result = !(a || b);\n          break;\n        case 'XOR':\n          result = (a && !b) || (!a && b);\n          break;\n        case 'XNOR':\n          result = !((a && !b) || (!a && b));\n          break;\n        default:\n          result = false;\n      }\n    // clock value is not set AND isClocked\n    } else if (isClocked && !c) {\n      result = false;\n    }\n\n    return result;\n  }\n}\n","module.exports = \"<mat-card class=\\\"gate\\\">\\n  <mat-card-header>\\n    <mat-card-title>Gate I/O</mat-card-title>\\n    <mat-card-subtitle>{{type}}</mat-card-subtitle>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <mat-checkbox [(ngModel)]=\\\"isClocked\\\" (change)=\\\"chooseGate()\\\"> Clocked? </mat-checkbox>\\n    <mat-checkbox [(ngModel)]=\\\"A\\\" (change)=\\\"chooseGate()\\\"> A </mat-checkbox>\\n    <mat-checkbox [(ngModel)]=\\\"B\\\" (change)=\\\"chooseGate()\\\"> B </mat-checkbox>\\n    <div *ngIf=\\\"isClocked\\\">\\n      <mat-checkbox [(ngModel)]=\\\"C\\\" (change)=\\\"chooseGate()\\\"> C </mat-checkbox>\\n    </div>\\n  </mat-card-content>\\n  <mat-card-actions align=\\\"end\\\">\\n    <mat-chip-list>\\n      <mat-chip color=\\\"primary\\\" selected *ngIf=\\\"output\\\">Positive</mat-chip>\\n      <mat-chip color=\\\"warn\\\" selected *ngIf=\\\"!output\\\">Negative</mat-chip>\\n    </mat-chip-list>\\n  </mat-card-actions>\\n</mat-card>\"","module.exports = \"mat-card-content mat-checkbox {\\n  display: block; }\\n\\n.gate {\\n  max-width: 400px; }\\n\"","import { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { Gate } from '../gate';\n\n@Component({\n  selector: 'app-gate',\n  templateUrl: './gate.component.html',\n  styleUrls: ['./gate.component.scss']\n})\nexport class GateComponent implements OnInit, OnChanges {\n  @Input() type: string;\n  gate: Gate;\n  output: boolean;\n  isClocked = false;\n  A = false;\n  B = false;\n  C = false;\n\n  constructor() {\n  }\n  ngOnChanges(): void {\n    this.gate = new Gate(this.type);\n    this.chooseGate();\n  }\n  ngOnInit() {\n    this.gate = new Gate(this.type);\n    this.chooseGate();\n  }\n\n  chooseGate(): void {\n    if (!this.isClocked) {\n      this.C = false;\n    }\n    this.output = this.gate.evaluate(this.A, this.B, this.C, this.isClocked);\n  }\n}\n","module.exports = \"<mat-card class=\\\"truth-table\\\">\\n  <mat-card-header>\\n    <mat-card-title>Truth Table</mat-card-title>\\n    <mat-card-subtitle>{{ type }}</mat-card-subtitle>\\n  </mat-card-header>\\n  <mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n    <ng-container matColumnDef=\\\"A\\\">\\n      <mat-header-cell *matHeaderCellDef > A </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let input\\\"> {{input.a}} </mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"B\\\">\\n      <mat-header-cell *matHeaderCellDef > B </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let input\\\"> {{input.b}} </mat-cell>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"X\\\">\\n      <mat-header-cell *matHeaderCellDef > X </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let input\\\"> {{input.x}} </mat-cell>\\n    </ng-container>\\n  \\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n    <mat-row *matRowDef=\\\"let input; columns: displayedColumns;\\\"></mat-row>\\n  </mat-table>\\n</mat-card>\"","module.exports = \".truth-table {\\n  max-width: 400px; }\\n\"","import { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { Gate } from '../gate';\n\n@Component({\n  selector: 'app-truth-table',\n  templateUrl: './truth-table.component.html',\n  styleUrls: ['./truth-table.component.scss']\n})\nexport class TruthTableComponent implements OnInit, OnChanges {\n  @Input() type: string;\n  truthTable: any[] = [];\n  truthTableInputs: TruthTable[] = [];\n  dataSource;\n  inputs = 2;\n  displayedColumns = ['A', 'B', 'X'];\n  constructor() { }\n\n  ngOnInit() {\n    this.generateTruthTable();\n  }\n\n  ngOnChanges() {\n    this.generateTruthTable();\n  }\n\n  generateTruthTable() {\n    this.truthTableInputs = [];\n    this.truthTable = [];\n    const inputArr: any[] = [];\n    /**\n     * Truth table AND gate example (2 inputs)\n     * A | B | X\n     * 0 | 0 | 0\n     * 1 | 0 | 0\n     * 0 | 1 | 0\n     * 1 | 1 | 1\n     *\n     * inputs are a 2 dimensional array like this\n     * [\n     *  [0,0],\n     *  [1,0],\n     *  [0,1],\n     *  [1,1]\n     * ]\n     */\n    this.getTruthTableInputs(inputArr);\n    this.generateTruthTableResult();\n  }\n\n  /**\n   * loop from 1 to 0 through as many inputs as needed\n   *\n   * @param inputArr empty array\n   */\n  getTruthTableInputs(inputArr) {\n    for (let i = 0; i < 2; i++) {\n      inputArr.push(i);\n      if (inputArr.length < this.inputs) {\n        this.getTruthTableInputs(inputArr);\n      } else {\n        this.truthTableInputs.push(inputArr.slice(-this.inputs));\n        inputArr.pop();\n      }\n    }\n    inputArr.pop();\n  }\n\n  /**\n   * Sort truth table inputs, assign to\n   * truth table with X value as the evaluated result\n   */\n  generateTruthTableResult() {\n    this.truthTableInputs.sort();\n    const gate = new Gate(this.type);\n    for (const inputs of this.truthTableInputs) {\n      this.truthTable.push({\n        a: inputs[0],\n        b: inputs[1],\n        x: + gate.evaluate(inputs[0], inputs[1], null, null)\n      });\n      this.dataSource = this.truthTable;\n    }\n  }\n}\n\ninterface TruthTable {\n  a: number[];\n  b: number[];\n  x: number[];\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}